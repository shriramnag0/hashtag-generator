// Quick generate functions
function generateTitle() {
    const topic = document.getElementById('videoTopic').value;
    const type = document.getElementById('contentType').value;
    const style = document.getElementById('contentStyle').value;
    
    if (!topic) {
        alert('Please enter a video topic');
        return;
    }

    // Show results with animation
    showResults();
    
    // Generate title based on type and style
    const title = generateTitleByType(topic, type, style);
    
    // Display title with typing effect
    const titleElement = document.getElementById('generatedTitle');
    typeText(titleElement, title);
}

function generateDescription() {
    const topic = document.getElementById('videoTopic').value;
    const type = document.getElementById('contentType').value;
    
    if (!topic) {
        alert('Please enter a video topic');
        return;
    }

    // Show results section
    document.getElementById('resultsSection').classList.remove('hidden');
    
    // Generate description
    const description = generateDescriptionByType(topic, type);
    
    // Display description
    document.getElementById('generatedDescription').textContent = description;
}

function generateTags() {
    const topic = document.getElementById('videoTopic').value;
    const type = document.getElementById('contentType').value;
    
    if (!topic) {
        alert('Please enter a video topic');
        return;
    }

    // Show results section
    document.getElementById('resultsSection').classList.remove('hidden');
    
    // Generate tags
    const tags = generateTagsByType(topic, type);
    
    // Display tags
    const tagsContainer = document.getElementById('generatedTags');
    tagsContainer.innerHTML = '';
    tags.forEach(tag => {
        const tagElement = document.createElement('span');
        tagElement.className = 'px-2 py-1 bg-gray-100 text-gray-600 rounded';
        tagElement.textContent = tag;
        tagsContainer.appendChild(tagElement);
    });
}

// Helper functions for generating content
function generateTitleByType(topic, type, style) {
    // Add your title generation logic here
    const titles = {
        howto: [
            `How to ${topic} (Complete Guide 2024)`,
            `${topic} Tutorial for Beginners`,
            `Master ${topic} in 10 Minutes!`,
            `${topic} Tips & Tricks You Need to Know`
        ],
        review: [
            `${topic} Review - Is it Worth It?`,
            `Honest Review of ${topic} in 2024`,
            `${topic} - The Truth Revealed!`,
            `Everything You Need to Know About ${topic}`
        ],
        // Add more types...
    };

    const options = titles[type] || titles.howto;
    return options[Math.floor(Math.random() * options.length)];
}

function generateDescriptionByType(topic, type) {
    const language = document.getElementById('language').value;
    const templates = {
        hindi: {
            howto: [
                `ЁЯОп ${topic} рдХреА рдкреВрд░реА рдЬрд╛рдирдХрд╛рд░реА

рдирдорд╕реНрдХрд╛рд░ рджреЛрд╕реНрддреЛрдВ! рдЖрдЬ рд╣рдо рдЬрд╛рдиреЗрдВрдЧреЗ ${topic} рдХреЗ рдмрд╛рд░реЗ рдореЗрдВред рдЗрд╕ рд╡реАрдбрд┐рдпреЛ рдореЗрдВ рдореИрдВ рдЖрдкрдХреЛ step by step рд╕рдм рдХреБрдЫ рд╕рдордЭрд╛рдКрдВрдЧрд╛ред

тЬи рдЗрд╕ рд╡реАрдбрд┐рдпреЛ рдореЗрдВ рд╕реАрдЦреЗрдВ:
тАв ${topic} рдХреА рдмреЗрд╕рд┐рдХ рдЬрд╛рдирдХрд╛рд░реА
тАв рд╕реНрдЯреЗрдк рдмрд╛рдп рд╕реНрдЯреЗрдк рдЧрд╛рдЗрдб
тАв рдкреНрд░реЛ рдЯрд┐рдкреНрд╕ рдФрд░ рдЯреНрд░рд┐рдХреНрд╕
тАв рдХреЙрдорди рдорд┐рд╕реНрдЯреЗрдХреНрд╕

тП░ рдЯрд╛рдЗрдорд╕реНрдЯреИрдореНрдкреНрд╕:
00:00 - рдЗрдВрдЯреНрд░реЛрдбрдХреНрд╢рди
02:15 - рдмреЗрд╕рд┐рдХ рдЬрд╛рдирдХрд╛рд░реА
05:30 - рд╕реНрдЯреЗрдк рдмрд╛рдп рд╕реНрдЯреЗрдк рдЧрд╛рдЗрдб
10:45 - рдПрдбрд╡рд╛рдВрд╕ рдЯрд┐рдкреНрд╕
15:30 - рдкреНрд░реЛ рдЯрд┐рдкреНрд╕
18:45 - рдХрдиреНрдХреНрд▓реВрдЬрди

ЁЯСН рдЕрдЧрд░ рд╡реАрдбрд┐рдпреЛ рдЕрдЪреНрдЫреА рд▓рдЧреЗ рддреЛ рд▓рд╛рдЗрдХ рдФрд░ рд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм рдЬрд░реВрд░ рдХрд░реЗрдВ!
ЁЯФФ рдмреЗрд▓ рдЖрдЗрдХрди рджрдмрд╛рдирд╛ рди рднреВрд▓реЗрдВ рддрд╛рдХрд┐ рдирдИ рд╡реАрдбрд┐рдпреЛ рдХреА рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рдорд┐рд▓реЗ

#Tutorial #HowTo #Learning #Hindi`,

                `ЁЯУЪ ${topic} рд╕реАрдЦреЗрдВ рдмрд┐рд▓реНрдХреБрд▓ рд╢реБрд░реВ рд╕реЗ

рджреЛрд╕реНрддреЛрдВ, рдЗрд╕ рд╡реАрдбрд┐рдпреЛ рдореЗрдВ рдореИрдВ рдЖрдкрдХреЛ ${topic} рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрд░реА рдЬрд╛рдирдХрд╛рд░реА рджреВрдВрдЧрд╛ред рдмрд┐рд▓реНрдХреБрд▓ рдмреЗрд╕рд┐рдХ рд╕реЗ рдПрдбрд╡рд╛рдВрд╕ рддрдХ!

ЁЯОп рд╡реАрдбрд┐рдпреЛ рдореЗрдВ рдХреНрдпрд╛ рд╣реИ:
- рдмрд┐рд▓реНрдХреБрд▓ рдмреЗрд╕рд┐рдХ рд╕реЗ рд╢реБрд░реБрдЖрдд
- рдЖрд╕рд╛рди рднрд╛рд╖рд╛ рдореЗрдВ рд╕рдордЭреЗрдВ
- рдкреНрд░реИрдХреНрдЯрд┐рдХрд▓ рдПрдЧреНрдЬрд╛рдореНрдкрд▓реНрд╕
- рдПрдХреНрд╕рдкрд░реНрдЯ рдЯрд┐рдкреНрд╕

тМЪ рдЯрд╛рдЗрдорд▓рд╛рдЗрди:
0:00 рд╢реБрд░реБрдЖрдд
2:00 рдмреЗрд╕рд┐рдХ рдХреЙрдиреНрд╕реЗрдкреНрдЯ
5:00 рд╕реНрдЯреЗрдк рдмрд╛рдп рд╕реНрдЯреЗрдк рдЧрд╛рдЗрдб
12:00 рдкреНрд░реИрдХреНрдЯрд┐рдХрд▓ рдПрдЧреНрдЬрд╛рдореНрдкрд▓реНрд╕
15:00 рдлрд╛рдЗрдирд▓ рдЯрд┐рдкреНрд╕

ЁЯТб рдРрд╕реА рдФрд░ рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП рдЪреИрдирд▓ рдХреЛ рд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм рдХрд░реЗрдВ!
ЁЯУ▒ рд╕реЛрд╢рд▓ рдореАрдбрд┐рдпрд╛ рдкрд░ рдлреЙрд▓реЛ рдХрд░реЗрдВ

#Education #Tutorial #Hindi`
            ],
            review: [
                `ЁЯФН ${topic} рдХрд╛ рд╕рдЪреНрдЪрд╛ рд░рд┐рд╡реНрдпреВ

рдирдорд╕реНрдХрд╛рд░ рджреЛрд╕реНрддреЛрдВ! рдЖрдЬ рд╣рдо рдХрд░реЗрдВрдЧреЗ ${topic} рдХрд╛ рдбрд┐рдЯреЗрд▓реНрдб рд░рд┐рд╡реНрдпреВред рдореИрдВрдиреЗ рдЗрд╕реЗ рдХрдИ рд╣рдлреНрддреЛрдВ рддрдХ рдЯреЗрд╕реНрдЯ рдХрд┐рдпрд╛ рд╣реИред

тнР рдХреНрдпрд╛ рджреЗрдЦреЗрдВрдЧреЗ:
тАв рдЕрдирдмреЙрдХреНрд╕рд┐рдВрдЧ рдФрд░ рдлрд░реНрд╕реНрдЯ рдЗрдореНрдкреНрд░реЗрд╢рди
тАв рдлреАрдЪрд░реНрд╕ рдФрд░ рд╕реНрдкреЗрд╕рд┐рдлрд┐рдХреЗрд╢рдиреНрд╕
тАв рд░рд┐рдпрд▓ рдЯреЗрд╕реНрдЯрд┐рдВрдЧ
тАв рдлрд╛рдпрджреЗ рдФрд░ рдиреБрдХрд╕рд╛рди
тАв рдлрд╛рдЗрдирд▓ рд╡рд░реНрдбрд┐рдХреНрдЯ

тП▒я╕П рдЯрд╛рдЗрдорд╕реНрдЯреИрдореНрдкреНрд╕:
00:00 - рдЗрдВрдЯреНрд░реЛрдбрдХреНрд╢рди
03:15 - рдЕрдирдмреЙрдХреНрд╕рд┐рдВрдЧ
07:30 - рдлреАрдЪрд░реНрд╕
12:45 - рдЯреЗрд╕реНрдЯрд┐рдВрдЧ
18:30 - рдкреНрд░реЛрд╕ рдФрд░ рдХреЙрдиреНрд╕
22:15 - рдлрд╛рдЗрдирд▓ рдереЙрдЯреНрд╕

ЁЯТ░ рдХреАрдордд: [рдкреНрд░рд╛рдЗрд╕]
тЬЕ рдЦрд░реАрджрдиреЗ рдХреЗ рд▓рд┐рдП: [рд▓рд┐рдВрдХ]

ЁЯСН рдРрд╕реЗ рдФрд░ рд░рд┐рд╡реНрдпреВ рдХреЗ рд▓рд┐рдП рдЪреИрдирд▓ рдХреЛ рд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм рдХрд░реЗрдВ!
ЁЯФФ рд╣рд░ рд╣рдлреНрддреЗ рдирдП рд░рд┐рд╡реНрдпреВ

#Review #ProductReview #Hindi`
            ],
            gaming: [
                `ЁЯОо ${topic} рдЧреЗрдордкреНрд▓реЗ рд╡реАрдбрд┐рдпреЛ!

рджреЛрд╕реНрддреЛрдВ, рдЖрдЬ рдЦреЗрд▓реЗрдВрдЧреЗ ${topic}! рддреИрдпрд╛рд░ рд╣реЛ рдЬрд╛рдЗрдП рдордЬреЗрджрд╛рд░ рдЧреЗрдордкреНрд▓реЗ рдФрд░ рдкреНрд░реЛ рдЯрд┐рдкреНрд╕ рдХреЗ рд▓рд┐рдПред

ЁЯОп рд╡реАрдбрд┐рдпреЛ рд╣рд╛рдЗрд▓рд╛рдЗрдЯреНрд╕:
тАв рдПрдкрд┐рдХ рдЧреЗрдордкреНрд▓реЗ рдореЛрдореЗрдВрдЯреНрд╕
тАв рд╕реНрдЯреНрд░реИрдЯрдЬреА рдЧрд╛рдЗрдб
тАв рдкреНрд░реЛ рдЯрд┐рдкреНрд╕ рдФрд░ рдЯреНрд░рд┐рдХреНрд╕
тАв рдмреЗрд╕реНрдЯ рд╕реЗрдЯрд┐рдВрдЧреНрд╕

тП░ рдЯрд╛рдЗрдорд╕реНрдЯреИрдореНрдкреНрд╕:
00:00 - рд╢реБрд░реБрдЖрдд
03:00 - рд╕реЗрдЯрдЕрдк рдФрд░ рд╕реНрдЯреНрд░реИрдЯрдЬреА
08:00 - рдореЗрди рдЧреЗрдордкреНрд▓реЗ
15:00 - рдкреНрд░реЛ рдЯрд┐рдкреНрд╕
20:00 - рдмреЗрд╕реНрдЯ рдореЛрдореЗрдВрдЯреНрд╕

ЁЯО╡ рдмреИрдХрдЧреНрд░рд╛рдЙрдВрдб рдореНрдпреВрдЬрд┐рдХ: [рдЯреНрд░реИрдХ рдиреЗрдореНрд╕]
ЁЯОо рдореЗрд░рд╛ рдЧреЗрдорд┐рдВрдЧ рд╕реЗрдЯрдЕрдк: [рд╕реЗрдЯрдЕрдк рдбрд┐рдЯреЗрд▓реНрд╕]

ЁЯСК рд▓рд╛рдЗрдХ рдФрд░ рд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм рдХрд░рдирд╛ рди рднреВрд▓реЗрдВ!
ЁЯФФ рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рд╕реНрдХреНрд╡рд╛рдб рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реЛрдВ!

#Gaming #Gameplay #${topic.replace(/\s+/g, '')} #Hindi`
            ]
        },
        english: {
            howto: [
                `ЁЯОп Complete Tutorial on ${topic}

In this comprehensive guide, I'll show you everything you need to know about ${topic}. Whether you're a beginner or advanced user, this tutorial has something for everyone!

тЬи What You'll Learn:
тАв Basic concepts of ${topic}
тАв Step-by-step instructions
тАв Pro tips and tricks
тАв Common mistakes to avoid

тП░ Timestamps:
00:00 - Introduction
02:15 - Getting Started
05:30 - Basic Tutorial
10:45 - Advanced Techniques
15:30 - Tips & Tricks
18:45 - Conclusion

ЁЯСН If you found this helpful, please like and subscribe for more tutorials!
ЁЯФФ Hit the bell icon to never miss an update

#Tutorial #HowTo #Learning`
            ],
            review: [
                `ЁЯФН Honest Review: ${topic}

Today we're taking a detailed look at ${topic}. After testing it for several weeks, here's my complete, unbiased review.

тнР What We'll Cover:
тАв Unboxing & First Impressions
тАв Features & Specifications
тАв Real-world Testing
тАв Pros & Cons
тАв Final Verdict

тП▒я╕П Timestamps:
00:00 - Introduction
03:15 - Unboxing
07:30 - Features Overview
12:45 - Testing & Results
18:30 - Pros & Cons
22:15 - Final Thoughts

ЁЯТ░ Price: [Insert Price]
тЬЕ Where to Buy: [Insert Link]

ЁЯСН Like & Subscribe for more honest reviews!
ЁЯФФ New reviews every week

#Review #ProductReview #Honest`
            ],
            gaming: [
                `ЁЯОо Epic ${topic} Gameplay!

Watch as we explore ${topic} in this exciting gameplay video! Get ready for some amazing moments and pro tips.

ЁЯОп Video Highlights:
тАв Epic Gameplay Moments
тАв Strategy Guide
тАв Pro Tips & Tricks
тАв Best Loadouts/Settings

тП░ Timestamps:
00:00 - Intro
03:00 - Setup & Strategy
08:00 - Main Gameplay
15:00 - Pro Tips
20:00 - Best Moments

ЁЯО╡ Background Music: [Insert Track Names]
ЁЯОо My Gaming Setup: [Insert Setup Details]

ЁЯСК Don't forget to LIKE and SUBSCRIBE!
ЁЯФФ Join the notification squad!

#Gaming #Gameplay #${topic.replace(/\s+/g, '')}`
            ],
            vlog: [
                `ЁЯУ╕ A Day in the Life: ${topic}

Join me for an exciting vlog about ${topic}! Let's make this journey together and create some amazing memories.

ЁЯОе Today's Adventures:
тАв Morning Routine
тАв Behind the Scenes
тАв Special Moments
тАв Exciting Surprises

тП░ Vlog Timeline:
0:00 - Good Morning!
3:00 - Starting the Day
8:00 - Main Activity
15:00 - Evening Fun
20:00 - Final Thoughts

ЁЯО╡ Music Credits: [Insert Track Names]
ЁЯУ▒ Social Media Links Below!

тЭдя╕П Like & Subscribe for daily vlogs!
ЁЯФФ Never miss an upload!

#Vlog #DailyLife #Lifestyle`
            ]
        }
    };

    const languageTemplates = templates[language] || templates.english;
    const options = languageTemplates[type] || languageTemplates.howto;
    return options[Math.floor(Math.random() * options.length)];
}

function generateTagsByType(topic, type) {
    const language = document.getElementById('language').value;
    const commonTags = [
        topic.toLowerCase(),
        topic.toLowerCase().replace(/\s+/g, ''),
        '2024',
        'youtube',
        'viral',
        'trending'
    ];

    // Add Hindi-specific tags if Hindi is selected
    if (language === 'hindi') {
        commonTags.push(
            'hindi',
            'hinditutorial',
            'hindivlog',
            'hindiyoutube',
            'hindichannel'
        );
    }

    const typeSpecificTags = {
        hindi: {
            howto: ['tutorial', 'howto', 'рд╕реАрдЦреЗрдВ', 'рд╢рд┐рдХреНрд╖рд╛', 'рдЧрд╛рдЗрдб', 'рдЯрд┐рдкреНрд╕', 'рдЯреНрд░рд┐рдХреНрд╕', 'рд╣рд┐рдВрджреА'],
            review: ['review', 'рд╕рдореАрдХреНрд╖рд╛', 'рдЕрдирдмреЙрдХреНрд╕рд┐рдВрдЧ', 'рдкрд░реАрдХреНрд╖рдг', 'рдкреНрд░реЛрдбрдХреНрдЯ', 'рдЦрд░реАрджрд╛рд░реА'],
            gaming: ['gaming', 'рдЧреЗрдорд┐рдВрдЧ', 'рдЧреЗрдорд░', 'рдЧреЗрдордкреНрд▓реЗ', 'рд╣рд┐рдВрджреАрдЧреЗрдорд┐рдВрдЧ', 'рдЧреЗрдорд┐рдВрдЧ2024'],
            vlog: ['vlog', 'рд╡реНрд▓реЙрдЧ', 'рд▓рд╛рдЗрдлрд╕реНрдЯрд╛рдЗрд▓', 'рдбреЗрд▓реА', 'рдпреВрдЯреНрдпреВрдмрд░', 'рд╣рд┐рдВрджреАрд╡реНрд▓реЙрдЧ']
        },
        english: {
            howto: ['tutorial', 'howto', 'learn', 'education', 'guide', 'tips', 'tricks', 'diy'],
            review: ['review', 'honest', 'unboxing', 'testing', 'product', 'comparison', 'buying guide'],
            gaming: ['gaming', 'gameplay', 'gamer', 'walkthrough', 'playthrough', 'gaming2024', 'gamingtips'],
            vlog: ['vlog', 'dailyvlog', 'lifestyle', 'daily', 'vlogger', 'life', 'routine'],
            educational: ['education', 'learning', 'study', 'knowledge', 'educational', 'academy', 'course']
        }
    };

    const languageTags = typeSpecificTags[language] || typeSpecificTags.english;
    return [...commonTags, ...(languageTags[type] || languageTags.howto)];
}

// Copy functions
async function copyTitle() {
    const title = document.getElementById('generatedTitle').textContent;
    await copyToClipboard(title);
    showCopyFeedback('titleResult');
}

async function copyDescription() {
    const description = document.getElementById('generatedDescription').textContent;
    await copyToClipboard(description);
    showCopyFeedback('descriptionResult');
}

async function copyTags() {
    const tags = Array.from(document.getElementById('generatedTags').children)
        .map(span => span.textContent)
        .join(', ');
    await copyToClipboard(tags);
    showCopyFeedback('tagsResult');
}

async function copyToClipboard(text) {
    try {
        await navigator.clipboard.writeText(text);
    } catch (err) {
        alert('Failed to copy text');
    }
}

function showResults() {
    const resultsSection = document.getElementById('resultsSection');
    resultsSection.classList.remove('hidden');
    
    // Add animation classes to results
    const results = resultsSection.querySelectorAll('.generated-content');
    results.forEach((result, index) => {
        result.style.animationDelay = `${index * 0.2}s`;
    });
}

// Add typing animation
function typeText(element, text, speed = 50) {
    element.textContent = '';
    let index = 0;
    
    function type() {
        if (index < text.length) {
            element.textContent += text.charAt(index);
            index++;
            setTimeout(type, speed);
        }
    }
    
    type();
}

// Add copy feedback animation
function showCopyFeedback(elementId) {
    const button = document.querySelector(`#${elementId} button`);
    const originalText = button.textContent;
    
    button.classList.add('scale-110', 'transform');
    button.textContent = 'Copied!';
    
    setTimeout(() => {
        button.classList.remove('scale-110', 'transform');
        button.textContent = originalText;
    }, 2000);
}

// Language-specific AI responses
const languageResponses = {
    hindi: {
        title: "рд╢реАрд░реНрд╖рдХ рдореЗрдВ рдкрд╛рд╡рд░ рд╡рд░реНрдбреНрд╕, рдирдВрдмрд░реНрд╕ рдпрд╛ рдЗрдореЛрд╢рдирд▓ рдЯреНрд░рд┐рдЧрд░реНрд╕ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред рдЙрджрд╛рд╣рд░рдг: 'рдЯреЙрдк 10 рд╕реАрдХреНрд░реЗрдЯреНрд╕...' рдпрд╛ 'рдХреИрд╕реЗ рдореИрдВрдиреЗ рдмрджрд▓рд╛...'",
        description: "рдЕрдкрдиреЗ рдбрд┐рд╕реНрдХреНрд░рд┐рдкреНрд╢рди рдХреЛ рдЖрдХрд░реНрд╖рдХ рдмрдирд╛рдПрдВ - рдПрдХ рд╣реБрдХ рд╕реЗ рд╢реБрд░реВ рдХрд░реЗрдВ, рдЯрд╛рдЗрдорд╕реНрдЯреИрдореНрдкреНрд╕ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ, рдФрд░ рд░рд┐рд▓реЗрд╡реЗрдВрдЯ рд▓рд┐рдВрдХреНрд╕ рдФрд░ рдХреЙрд▓ рдЯреВ рдПрдХреНрд╢рди рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВред",
        tags: "рдмреНрд░реЙрдб рдФрд░ рд╕реНрдкреЗрд╕рд┐рдлрд┐рдХ рдЯреИрдЧреНрд╕ рдХрд╛ рдорд┐рд╢реНрд░рдг рдХрд░реЗрдВред рдЕрдкрдирд╛ рдореБрдЦреНрдп рдХреАрд╡рд░реНрдб, рд╡реИрд░рд┐рдПрд╢рдиреНрд╕ рдФрд░ рд░рд┐рд▓реЗрдЯреЗрдб рдЯрд░реНрдореНрд╕ рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВред",
        ideas: "рдЕрдкрдиреА рдирд┐рд╢ рдореЗрдВ рдЯреНрд░реЗрдВрдбрд┐рдВрдЧ рдЯреЙрдкрд┐рдХреНрд╕ рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВ, рдХреЙрдорди рдкреНрд░реЙрдмреНрд▓рдореНрд╕ рдХреЛ рд╕реЙрд▓реНрд╡ рдХрд░реЗрдВ, рдпрд╛ рдЕрдкрдиреЗ рдпреВрдиреАрдХ рдПрдХреНрд╕рдкреАрд░рд┐рдпрдВрд╕ рд╢реЗрдпрд░ рдХрд░реЗрдВред",
        views: "SEO рдкрд░ рдлреЛрдХрд╕ рдХрд░реЗрдВ, рдПрдВрдЧреЗрдЬрд┐рдВрдЧ рдердВрдмрдиреЗрд▓ рдмрдирд╛рдПрдВ рдФрд░ рдХрдВрд╕рд┐рд╕реНрдЯреЗрдВрдЯрд▓реА рдкреЛрд╕реНрдЯ рдХрд░реЗрдВред рдЕрдиреНрдп рдХреНрд░рд┐рдПрдЯрд░реНрд╕ рдХреЗ рд╕рд╛рде рдХреЛрд▓реИрдмреЛрд░реЗрд╢рди рднреА рдХрд░реЗрдВред",
        greeting: "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ AI рдХрдВрдЯреЗрдВрдЯ рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ рд╣реВрдВред рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ?",
        default: "рдореИрдВ рдЖрдкрдХреЛ рд╡реАрдбрд┐рдпреЛ рдЯрд╛рдЗрдЯрд▓, рдбрд┐рд╕реНрдХреНрд░рд┐рдкреНрд╢рди, рдЯреИрдЧреНрд╕, рдХрдВрдЯреЗрдВрдЯ рдЖрдЗрдбрд┐рдпрд╛рдЬ рдФрд░ рдЧреНрд░реЛрде рд╕реНрдЯреНрд░реИрдЯреЗрдЬреАрдЬ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВред рдЖрдк рдХрд┐рд╕ рдмрд╛рд░реЗ рдореЗрдВ рдФрд░ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?"
    },
    gujarati: {
        title: "рк╢рлАрк░рлНрк╖ркХркорк╛ркВ рккрк╛рк╡рк░ рк╡рк░рлНркбрлНрк╕, ркиркВркмрк░рлНрк╕ ркЕркерк╡рк╛ ркЗркорлЛрк╢ркирк▓ ркЯрлНрк░рк┐ркЧрк░рлНрк╕ркирлЛ ркЙрккркпрлЛркЧ ркХрк░рлЛ. ркЙркжрк╛рк╣рк░ркг: 'ркЯрлЛркк 10 рк╕рлАркХрлНрк░рлЗркЯрлНрк╕...' ркЕркерк╡рк╛ 'ркХрлЗрк╡рлА рк░рлАркдрлЗ ркорлЗркВ ркмркжрк▓рлНркпрлБркВ...'",
        description: "ркдркорк╛рк░рк╛ рк╡рк░рлНркгркиркирлЗ ркЖркХрк░рлНрк╖ркХ ркмркирк╛рк╡рлЛ - ркПркХ рк╣рлБркХ рк╕рк╛ркерлЗ рк╢рк░рлВ ркХрк░рлЛ, ркЯрк╛ркЗркорк╕рлНркЯрлЗркорлНрккрлНрк╕ркирлЛ ркЙрккркпрлЛркЧ ркХрк░рлЛ, ркЕркирлЗ рк╕ркВркмркВркзрк┐ркд рк▓рк┐ркВркХрлНрк╕ ркЕркирлЗ ркХрлЙрк▓ ркЯрлБ ркПркХрлНрк╢рки рк╢рк╛ркорлЗрк▓ ркХрк░рлЛ.",
        tags: "рк╡рлНркпрк╛рккркХ ркЕркирлЗ рк╡рк┐рк╢рк┐рк╖рлНркЯ ркЯрлЕркЧрлНрк╕ркирлБркВ ркорк┐рк╢рлНрк░ркг ркХрк░рлЛ. ркдркорк╛рк░рк╛ ркорлБркЦрлНркп ркХрлАрк╡рк░рлНркб, рк╡рлЗрк░рк┐ркПрк╢ркирлНрк╕ ркЕркирлЗ рк╕ркВркмркВркзрк┐ркд рк╢ркмрлНркжрлЛ рк╢рк╛ркорлЗрк▓ ркХрк░рлЛ.",
        ideas: "ркдркорк╛рк░рлА ркирк┐рк╢ркорк╛ркВ ркЯрлНрк░рлЗркирлНркбрк┐ркВркЧ ркЯрлЛрккрк┐ркХрлНрк╕ рк╡рк┐ркЪрк╛рк░рлЛ, рк╕рк╛ркорк╛ркирлНркп рк╕ркорк╕рлНркпрк╛ркУркирлБркВ рк╕ркорк╛ркзрк╛рки ркХрк░рлЛ, ркЕркерк╡рк╛ ркдркорк╛рк░рк╛ ркЕркиркирлНркп ркЕркирлБркнрк╡рлЛ рк╢рлЗрк░ ркХрк░рлЛ.",
        views: "SEO рккрк░ ркзрлНркпрк╛рки ркХрлЗркирлНркжрлНрк░рк┐ркд ркХрк░рлЛ, ркЖркХрк░рлНрк╖ркХ ркеркВркмркирлЗрк▓рлНрк╕ ркмркирк╛рк╡рлЛ ркЕркирлЗ ркирк┐ркпркорк┐ркд рккрлЛрк╕рлНркЯ ркХрк░рлЛ. ркЕркирлНркп ркХрлНрк░рк┐ркПркЯрк░рлНрк╕ рк╕рк╛ркерлЗ рк╕рк╣ркпрлЛркЧ рккркг ркХрк░рлЛ.",
        greeting: "ркиркорк╕рлНркдрлЗ! рк╣рлБркВ ркдркорк╛рк░рлЛ AI ркХркирлНркЯрлЗркирлНркЯ ркЖрк╕рк┐рк╕рлНркЯркирлНркЯ ркЫрлБркВ. рк╣рлБркВ ркдркорк╛рк░рлА ркХрлЗрк╡рлА рк░рлАркдрлЗ ркоркжркж ркХрк░рлА рк╢ркХрлБркВ?",
        default: "рк╣рлБркВ ркдркоркирлЗ рк╡рк┐ркбрк┐ркУ ркЯрк╛ркЗркЯрк▓, ркбрк┐рк╕рлНркХрлНрк░рк┐рккрлНрк╢рки, ркЯрлЕркЧрлНрк╕, ркХркирлНркЯрлЗркирлНркЯ ркЖркЗркбрк┐ркпрк╛ркЭ ркЕркирлЗ ркЧрлНрк░рлЛрке рк╕рлНркЯрлНрк░рлЗркЯрлЗркЬрлАрк╕ркорк╛ркВ ркоркжркж ркХрк░рлА рк╢ркХрлБркВ ркЫрлБркВ. ркдркорлЗ рк╢рлБркВ рк╡ркзрлБ ркЬрк╛ркгрк╡рк╛ ркорк╛ркВркЧрлЛ ркЫрлЛ?"
    },
    // Add more languages...
};

// Update generateAIResponse to use selected language
function generateAIResponse(message) {
    const language = document.getElementById('language').value;
    const responses = languageResponses[language] || languageResponses.english;
    
    message = message.toLowerCase();
    
    if (message.includes('title')) return responses.title;
    if (message.includes('description')) return responses.description;
    if (message.includes('tag')) return responses.tags;
    if (message.includes('idea')) return responses.ideas;
    if (message.includes('view')) return responses.views;
    
    return responses.default;
}

// Update addChatMessage to handle initial greeting in selected language
function addInitialGreeting() {
    const language = document.getElementById('language').value;
    const greeting = languageResponses[language]?.greeting || languageResponses.english.greeting;
    addChatMessage(greeting, 'bot');
}

// Update toggleAIChat to use new greeting function
function toggleAIChat() {
    const chatbox = document.getElementById('aiChatbox');
    chatbox.classList.toggle('hidden');
    
    if (!chatbox.classList.contains('hidden')) {
        document.getElementById('userMessage').focus();
        
        // Add initial message if chat is empty
        const messages = document.getElementById('chatMessages');
        if (messages.children.length === 0) {
            addInitialGreeting();
        }
    }
}

// Add language change listener
document.getElementById('language')?.addEventListener('change', function() {
    const messages = document.getElementById('chatMessages');
    if (messages) {
        messages.innerHTML = '';
        addInitialGreeting();
    }
});

// Content Ideas Generator
function generateContentIdeas() {
    const niche = document.getElementById('contentNiche').value;
    const ideasContainer = document.getElementById('ideaResults');
    ideasContainer.innerHTML = '';
    
    showIdeaLoading(true);
    
    setTimeout(() => {
        const ideas = getContentIdeas(niche);
        displayContentIdeas(ideas);
        showIdeaLoading(false);
    }, 1000);
}

function getContentIdeas(niche) {
    const ideas = {
        tech: [
            "10 Hidden Features in [Latest Gadget]",
            "Budget vs Premium: Is it Worth the Upgrade?",
            "How to Speed Up Your [Device] in 5 Minutes",
            "The Truth About [Tech Trend] - Explained",
            "5 Must-Have Apps for [Specific Task]"
        ],
        lifestyle: [
            "Day in the Life: [Specific Routine]",
            "5 Life-Changing Habits I Learned",
            "Room/House Tour & Organization Tips",
            "How I Stay Productive Working from Home",
            "Honest Review: [Popular Product] After 6 Months"
        ],
        gaming: [
            "Top 10 Tips for [Popular Game]",
            "Hidden Easter Eggs in [Game]",
            "Pro vs Noob: [Game] Strategies",
            "Best Settings for [Game] in 2024",
            "How to Level Up Fast in [Game]"
        ],
        education: [
            "Understanding [Complex Topic] Simply",
            "Study With Me - Real Time",
            "5 Memory Techniques for Better Learning",
            "Common Mistakes in [Subject]",
            "Quick Tips for [Academic Skill]"
        ]
    };
    
    return ideas[niche] || ideas.tech;
}

function displayContentIdeas(ideas) {
    const container = document.getElementById('ideaResults');
    
    ideas.forEach(idea => {
        const ideaCard = document.createElement('div');
        ideaCard.className = 'p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition cursor-pointer';
        
        const ideaText = document.createElement('p');
        ideaText.className = 'text-gray-800 font-medium';
        ideaText.textContent = idea;
        
        const useButton = document.createElement('button');
        useButton.className = 'mt-2 text-sm text-purple-600 hover:text-purple-800';
        useButton.textContent = 'Use This Idea';
        useButton.onclick = () => useContentIdea(idea);
        
        ideaCard.appendChild(ideaText);
        ideaCard.appendChild(useButton);
        container.appendChild(ideaCard);
    });
}

function useContentIdea(idea) {
    document.getElementById('videoTopic').value = idea;
    document.getElementById('videoTopic').scrollIntoView({ behavior: 'smooth' });
}

function showIdeaLoading(show) {
    const container = document.getElementById('ideaResults');
    if (show) {
        container.innerHTML = `
            <div class="flex justify-center items-center py-8">
                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-700"></div>
            </div>
        `;
    }
}

// Add this to your existing content-tools.js
document.getElementById('mobileMenuBtn')?.addEventListener('click', function() {
    const mobileMenu = document.getElementById('mobileMenu');
    mobileMenu.classList.toggle('hidden');
});

// Close mobile menu when clicking outside
document.addEventListener('click', function(event) {
    const mobileMenu = document.getElementById('mobileMenu');
    const mobileMenuBtn = document.getElementById('mobileMenuBtn');
    
    if (!mobileMenuBtn?.contains(event.target) && !mobileMenu?.contains(event.target)) {
        mobileMenu?.classList.add('hidden');
    }
});

// Dark mode toggle functionality
const darkModeToggle = document.createElement('button');
darkModeToggle.className = 'fixed top-20 right-4 bg-gray-800 text-white p-2 rounded-full shadow-lg';
darkModeToggle.innerHTML = 'ЁЯМЩ';
document.body.appendChild(darkModeToggle);

let isDarkMode = localStorage.getItem('darkMode') === 'true';

function toggleDarkMode() {
    isDarkMode = !isDarkMode;
    localStorage.setItem('darkMode', isDarkMode);
    updateTheme();
}

function updateTheme() {
    if (isDarkMode) {
        document.documentElement.classList.add('dark');
        darkModeToggle.innerHTML = 'тШАя╕П';
    } else {
        document.documentElement.classList.remove('dark');
        darkModeToggle.innerHTML = 'ЁЯМЩ';
    }
}

darkModeToggle.addEventListener('click', toggleDarkMode);
updateTheme();

// Keyboard shortcuts
document.addEventListener('keydown', function(e) {
    // Ctrl/Cmd + / to toggle AI chat
    if ((e.ctrlKey || e.metaKey) && e.key === '/') {
        e.preventDefault();
        toggleAIChat();
    }
    
    // Ctrl/Cmd + D to toggle dark mode
    if ((e.ctrlKey || e.metaKey) && e.key === 'd') {
        e.preventDefault();
        toggleDarkMode();
    }
    
    // Ctrl/Cmd + G to quick generate
    if ((e.ctrlKey || e.metaKey) && e.key === 'g') {
        e.preventDefault();
        generateAll();
    }
});

// Show shortcuts helper
const shortcutsHelper = document.createElement('div');
shortcutsHelper.className = 'fixed bottom-4 left-4 bg-white p-4 rounded-lg shadow-lg hidden';
shortcutsHelper.innerHTML = `
    <h3 class="font-bold mb-2">Keyboard Shortcuts</h3>
    <div class="space-y-1 text-sm">
        <div>Ctrl + / : Toggle AI Chat</div>
        <div>Ctrl + D : Toggle Dark Mode</div>
        <div>Ctrl + G : Quick Generate</div>
    </div>
`;
document.body.appendChild(shortcutsHelper);

// Progress tracking
const progressTracker = {
    saveProgress() {
        const progress = {
            videosCreated: parseInt(localStorage.getItem('videosCreated') || '0'),
            totalViews: parseInt(localStorage.getItem('totalViews') || '0'),
            completedTasks: JSON.parse(localStorage.getItem('completedTasks') || '[]'),
            streak: parseInt(localStorage.getItem('streak') || '0'),
            lastActive: localStorage.getItem('lastActive')
        };
        
        // Update streak
        const today = new Date().toDateString();
        if (progress.lastActive !== today) {
            if (isConsecutiveDay(progress.lastActive)) {
                progress.streak++;
            } else {
                progress.streak = 1;
            }
            progress.lastActive = today;
        }
        
        // Save updated progress
        Object.entries(progress).forEach(([key, value]) => {
            localStorage.setItem(key, JSON.stringify(value));
        });
        
        return progress;
    },
    
    updateStats(type) {
        const progress = this.saveProgress();
        if (type === 'video') {
            localStorage.setItem('videosCreated', progress.videosCreated + 1);
        }
        this.displayProgress();
    },
    
    displayProgress() {
        const progress = this.saveProgress();
        const statsContainer = document.getElementById('progressStats');
        if (statsContainer) {
            statsContainer.innerHTML = `
                <div class="grid grid-cols-4 gap-4">
                    <div class="text-center">
                        <div class="text-2xl font-bold">${progress.videosCreated}</div>
                        <div class="text-sm text-gray-600">Videos Created</div>
                    </div>
                    <div class="text-center">
                        <div class="text-2xl font-bold">${progress.totalViews}</div>
                        <div class="text-sm text-gray-600">Total Views</div>
                    </div>
                    <div class="text-center">
                        <div class="text-2xl font-bold">${progress.completedTasks.length}</div>
                        <div class="text-sm text-gray-600">Tasks Completed</div>
                    </div>
                    <div class="text-center">
                        <div class="text-2xl font-bold">${progress.streak}</div>
                        <div class="text-sm text-gray-600">Day Streak</div>
                    </div>
                </div>
            `;
        }
    }
};

// Settings management
const settingsManager = {
    async exportSettings() {
        const settings = {
            language: localStorage.getItem('language'),
            darkMode: localStorage.getItem('darkMode'),
            templates: localStorage.getItem('savedTemplates'),
            progress: {
                videosCreated: localStorage.getItem('videosCreated'),
                totalViews: localStorage.getItem('totalViews'),
                completedTasks: localStorage.getItem('completedTasks'),
                streak: localStorage.getItem('streak')
            }
        };
        
        const blob = new Blob([JSON.stringify(settings, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'content-tools-settings.json';
        a.click();
    },
    
    async importSettings(file) {
        try {
            const text = await file.text();
            const settings = JSON.parse(text);
            
            // Apply imported settings
            Object.entries(settings).forEach(([key, value]) => {
                if (typeof value === 'object') {
                    Object.entries(value).forEach(([subKey, subValue]) => {
                        localStorage.setItem(subKey, subValue);
                    });
                } else {
                    localStorage.setItem(key, value);
                }
            });
            
            // Refresh UI
            updateTheme();
            progressTracker.displayProgress();
            showNotification('Settings imported successfully!');
        } catch (error) {
            showNotification('Error importing settings', 'error');
        }
    }
}; 

// Template management
const thumbnailTemplates = {
    gaming: {
        background: 'gradient',
        gradientColors: ['#ff0000', '#9333ea'],
        textPosition: 'center',
        elements: [
            {
                type: 'emoji',
                content: 'ЁЯОо',
                position: { x: 50, y: 50 },
                size: 48
            },
            {
                type: 'text',
                content: 'EPIC GAMEPLAY',
                position: { x: 640, y: 200 },
                style: {
                    font: 'bold 72px Arial',
                    color: '#ffffff',
                    stroke: '#000000',
                    strokeWidth: 4
                }
            }
        ]
    },
    tech: {
        background: 'solid',
        backgroundColor: '#1e293b',
        textPosition: 'left',
        elements: [
            {
                type: 'text',
                content: 'ULTIMATE REVIEW',
                position: { x: 640, y: 150 },
                style: {
                    font: 'bold 64px Arial',
                    color: '#ffffff',
                    stroke: '#000000',
                    strokeWidth: 3
                }
            },
            {
                type: 'rating',
                value: 4.5,
                position: { x: 640, y: 300 }
            }
        ]
    },
    tutorial: {
        background: 'gradient',
        gradientColors: ['#22c55e', '#14b8a6'],
        textPosition: 'center',
        elements: [
            {
                type: 'text',
                content: 'COMPLETE GUIDE',
                position: { x: 640, y: 180 },
                style: {
                    font: 'bold 68px Arial',
                    color: '#ffffff',
                    stroke: '#000000',
                    strokeWidth: 3
                }
            },
            {
                type: 'emoji',
                content: 'ЁЯУЪ',
                position: { x: 640, y: 300 },
                size: 64
            }
        ]
    }
};

function useTemplate(templateName) {
    const template = thumbnailTemplates[templateName];
    if (!template) return;

    // Clear canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Apply background
    if (template.background === 'gradient') {
        const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
        gradient.addColorStop(0, template.gradientColors[0]);
        gradient.addColorStop(1, template.gradientColors[1]);
        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
    } else {
        ctx.fillStyle = template.backgroundColor;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
    }

    // Add template elements
    template.elements.forEach(element => {
        switch (element.type) {
            case 'text':
                ctx.font = element.style.font;
                ctx.fillStyle = element.style.color;
                ctx.strokeStyle = element.style.stroke;
                ctx.lineWidth = element.style.strokeWidth;
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.strokeText(element.content, element.position.x, element.position.y);
                ctx.fillText(element.content, element.position.x, element.position.y);
                break;

            case 'emoji':
                ctx.font = `${element.size}px serif`;
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.fillText(element.content, element.position.x, element.position.y);
                break;

            case 'rating':
                drawRating(element.value, element.position.x, element.position.y);
                break;
        }
    });
}

function drawRating(value, x, y) {
    const starCount = 5;
    const starSize = 30;
    const starSpacing = 40;
    const startX = x - (starCount * starSpacing) / 2;

    for (let i = 0; i < starCount; i++) {
        const starX = startX + i * starSpacing;
        const fillAmount = Math.max(0, Math.min(1, value - i));
        
        // Draw star outline
        ctx.font = `${starSize}px serif`;
        ctx.fillStyle = '#666666';
        ctx.textAlign = 'center';
        ctx.fillText('тШЕ', starX, y);

        // Draw filled portion
        if (fillAmount > 0) {
            ctx.fillStyle = '#ffd700';
            ctx.fillText('тШЕ', starX, y);
        }
    }
}

// Add download functionality
function downloadThumbnail() {
    const link = document.createElement('a');
    link.download = 'thumbnail.png';
    link.href = canvas.toDataURL('image/png');
    link.click();
} 